{
  "title": "Basic",
  "cells": [
    {
      "type": "markdown",
      "data": "* prototype-based, dynamic language\n* an object used as a template from which to get the initial properties for a new object.any object can specify its own properties, whether when you create or at run time\n* objective-oriented, functional programming\n* scripting language\n* case-sensitive & unicode\n* undefined: determine whether a variable has a value "
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "if (input ===undefined)"
    },
    {
      "type": "markdown",
      "data": "* let: block-scoped, local variable\n* const: block-scoped, read-only\n* cannot declare a content with the same name as a function or variable in the same scope\n* global object: window"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "window.variable"
    },
    {
      "type": "markdown",
      "data": "* string to number: parseInt() parseFloat()\n* object literal: list of zero or more pairs of property names and associated values of an object"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "var sales = 'Toyota';\nfunction carTypes(name) {\n  if (name === 'Honda') {\n    return name;\n  } \n  else {\n    return \"Sorry, we don't sell \" + name + \".\";\n  }\n}\nvar car = { myCar: 'Saturn', getCar: carTypes('Honda'), special: sales };\nconsole.log(car.myCar); // Saturn\nconsole.log(car.getCar); // Honda\nconsole.log(car.special); // Toyota"
    },
    {
      "type": "markdown",
      "data": "\n* error object: e.name, e.message\n* closure: allow for the nesting of functions and grants the inner function full access to all the variables and functions defined inside the outer function\n* argument object: array-like object\n* rest parameter:"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "function f(a, b, ...theArgs) {\n // ...\n}"
    },
    {
      "type": "markdown",
      "data": "* relational operators:\n* in: if the specified property is in the object\n* array.length: return the index of the last element plus one\n* weak map: a collection of key value pairs in which the keys are the objects only and the values can be arbitrary values\n*"
    }
  ]
}