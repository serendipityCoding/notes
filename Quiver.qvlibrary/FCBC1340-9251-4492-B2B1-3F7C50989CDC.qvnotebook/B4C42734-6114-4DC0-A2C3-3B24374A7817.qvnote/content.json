{
  "title": "Lecture 6 JDBC",
  "cells": [
    {
      "type": "markdown",
      "data": "* JDBC: providing a standard library for accessing relational databases\n  1. API: a purely Java-based API\n  2. JDBC Driver Manager: communcates with vendor-specific drivers that perform the real communication with the database\n    *translation to vendor format is performed on the client*\n* Steps:\n  1. define the connection URL\n    * jdbc: <driverName>:<databaseName>\n  2. load the server (Microsoft SQL Server JDBC driver)\n    * Class.forName(<JDBC_driver_class>)\n    **lastest version: Java SE 6 no need to specify the JDBC driver**\n  3. establish the connection\n    * Connection con=DariverManager.getConnection(<connectionURL>,<userID>,<password>)\n  4. create a statement object\n    * Statement stmt=con.createStatement()\n      * Statement: execute a siple SQL statements\n      * PreparedStatement: execute a precompiled SQL statement passing in parameters, created in standard form that is sent to the database for compilation before actually being used\n        * execute similar SQL statements multiple times using prepared statements can be more efficient\n        * setXxx: set the indicated parameter (?) in the SQL statement to the value\n      * CallableStatement: execute a database stored procedure\n        * CallableStatement statement =connection.prepareCall(\"{ call procedure(?, ?) }\");\n        * registerOutputParamter: bind indexed output parameter to a JDBC type, provide a scale paraeter to specify the number of digits to the right of the decimal poit for numeric or decimal JSBC types\n          * statement,registerOutParameter (2, Types.DECIMAL, 2);\n  5. execute a query\n    * String strSql=\"select from where\"\n    * ResultSet rs=stmt.executeQuery(strSQL);\n    *modify the database, use executeUpdate, return the number of rows that were affected in the database*\n    *use setQueryTimeOut to specify a maximum delay to wait for results*\n  6. process the resuts\n    * use while(rs.next()) to allow the program to continue to the end of the data\n    * first column has index 1, not 0\n    * ResultSet provides various getXxxx method that take a column index or name and returns the data\n      * all method can throw a SQLException\n      * getMetaDataObject: return a ResultSetMetaData object containing information about the coluns in the resultSet\n      * getWarnings(): return the first SQLWarining or null if no warnings occured\n      * findColumn: return the corresponding integer value corresponding to the specified column name\n  7. close the connection\n    * con.close()\n* Error Handling:\n  * Causes:\n    1. network connectivity\n    2. user authentication and access rights\n    3. invalid SQL statements\n    4. class-loading errors with drivers\n    5. invalid data type conversions\n* Transactions: call commit to permanently record the changes to the database after executing a group of statements, call rollback if an error occurs\n  * connection.setAutoCommit(false)\n  * Commit: any database locks currently held by this Connection object are released\n  * Rollback: release any database locks held by this Connection object"
    }
  ]
}