{
  "title": "CS4280 Assignment 2",
  "cells": [
    {
      "type": "markdown",
      "data": "#File Structure (MVC)\n1. model: database, Java beans\n  * user: id, username, password, createDate, email, lastLogin, credit, vipLevel\n  * manager: id, username, password, createDate, email, employeeID, lastLogin, isActive\n  * chiefManager: id, username, password, createDate, email, employeeID, lastLogin\n  * log: id, type (WARN, INFO, ERROR), errorMsg, ip, date, extraInfo\n  * roomType: id, type, size, bedNo, guestNo\n  * rooms: id, roomID, roomType, floorNo, location, roomInfo, imageURL, price, plus, minus\n  * bookings: id, roomID, fromDate, toDate, userID, createDate\n  * vipInfo: id, vipLevel, discount, minCredit\n  * bill: id, bookingID, originalPrice, discount, isPaid, paidDate, userID, paymentMethod, expiredDate, createDate\n2. controller: OO style\n  * LoginCustomer: username/email, password (FORM, SESSION)\n    * forget password (send Email with token for reset)\n  * SignUpCustomer: username, email, password (FORM)\n  * LogoutCustomer: delete SESSION, return to the front page\n  * LoginManager: select role, username/email, password(FORM, SESSIOn)\n  * LogoutManager: delete SESSIOn, return to the front page\n  * HomePage (Room Search): fromDate, toDate, location, guestNo(optional) --> POST/GET\n  * DetaiPage: roomInfo, image, display\n    * make booking through this page\n    * can change date (GET) check availability\n  * PersonalInfoPage: detail Info, can change\n  * CheckoutPage: calculate the sum and corresponding credit and discount, choose payment method\n  * BookingHistoryPage: \n    * Paid/Expired\n    * Outstanding: can be modified + check availability\n  * ChiefManagerControlPage: get allmanager info, set active\n  * ManagerControlPage:\n    * offere search option\n    * get all the room info, change price, availability\n    * get the booking history of the selected room\n3. view:\n\n\n### Functionality\n* Customer: \n  1. search based on different criteria\n    * room type:\n    * date:\n    * room no:\n    * resident no:\n    * destination\n    * show the recommended room first if possible\n  2. make a booking:\n    * make multiplebook at one time\n    * need to show the discounted price\n    * personal data form + payment method\n  3. modify or cancel booking:\n    * check the availability of the modified room\n    * cancel booking may depend on the time of cancellation\n  4 login system\n    * keep past booking history\n    * personal data filling in\n* Manager:\n  1. login system\n  2. manage room info:\n    * same shared information between customer and manager\n    * view the changing history \n  3. recommend room:\n    * based on past preference\n    * actual criteria\n* Chief manager:\n  1. login system:\n  2. manage managers\n  \nEach Customer can request for one or more Room.\nEach Room must be belongs to one Room Type.\nEach Room Type can contain one or many Room.\nEach Booking must be belongs to one Date.\nEach Date can contain one or more Booking.\nEach Room Type can contain one or many Rent.\nEach Rent must belongs to one Room Type.\nEach Booking must include one or many Room.\nEach Room can be included in one Booking.\nEach Customer can hold one or many Booking.\nEach Booking must belongs to one Customer.\nEach Rent can be included in one or many Bill.\nEach Bill must include one Rent.\nEach Bill Payment must include one Payment Type.\nEach Payment Type can contain one or many Bill Payment.\nEach Date can contain one or many Bill Payment.\nEach Bill Payment must belongs to one Date.\nEach Room can be rated one or many Room Rating.\nEach Room Rating must belongs to one Room.\nEach Rating can contain one or many Room Rating.\nEach Room Rating must belongs to one Rating."
    }
  ]
}