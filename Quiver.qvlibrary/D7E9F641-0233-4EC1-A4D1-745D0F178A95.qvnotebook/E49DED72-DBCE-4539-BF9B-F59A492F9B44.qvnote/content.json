{
  "title": "Lecture 3",
  "cells": [
    {
      "type": "markdown",
      "data": "* Virtualization (focus on hardware): allow one computer to look like multiple computers, doing multiple jobs, by sharing the resources of a single machine across multiple environments\n* Nonvirtualized: a single OS controls al the hardware platform resources\n\t* software and hardware is tightly coupledâ€”> low utilisation\n* virtualised: run multiple VM on a single physical platform\n* Hosted architecture: hostOS does not perform virtualization, have no idea of the VM\n\t* virtulization layer is running as an application on top of the operating system\n\t * VMWare, VritualBox\n\t * indirect access to hardware through thee host OS\n\t\t * performance penalty\n* Hypervisor architecture: install the virtualization layer directly on a clean system\n\t* installer is usually an ISO installing a tailor-made OS\n\t* direct access to hardware resources, greater scalability, robustness and performance\n* CPU  Virtualization:\n  * The CPU doe snot care whether you are guest or not\n  * what is important is the privileged code (instrcutions from the virtual machine cannot be directly executed)\n  * Implementations:\n\t  * Full virtualization\n\t    * having the four protection rings, put Host OS and Hypervisor in the ring 0 so as to access the hardware, guest applications in ring 3 runs as usual. However, the guest kernal code is placed in ring 1 instead of ring 0, guest kernal is not aware of its being birtual machine, unpriviledged innstrcutions are running ont he CPU as usual\n\t    * Regardless of the actual physical hardware on the host system, the emulated hardware remains the same.\n\t    * Technology\n\t      * Hardware emulation: hypervisor is responsible of providing a whole set of hardware (like virtual CPU, virtual disk) to the guest OS(can only emulate a small virtual machine)\n\t      * Binary translation: emulate the effect and interruption, transfer to the safe instructions\n\t        1.  trapping privileged instructions (instructions related to the hardware, like I?O read and write)\n\t        2. emulate/translate \n\t    * puts a lot of burden of the hypervisor, as long as the virutal machine is running the hypervisor is running \n\t    * Advantage:\n\t      * keep the guest OS unmodified\n\t      * prevent n unstable VMs from impacting system performance\n\t    * Disadvantage:\n\t      *performance is not good\n\t  * Para Virualization (para means besides, with, alongside)--> commonly used\n\t    * overcome the performance overhead of full virtualization\n\t    * same as the full virtualization, the difference is the modified the guest OS kernal, the guest understand of being as virtual machine,  knowing the things cannot be done, leave the unimpact of the hypervisor, so it is necessary ot include virtualization APIs and driver, the API call the hypervisor to do the things for guest OS, the hypervisor does not need to monitor the guest OS, when the guest is needed, it will the API for help--> hypercalls\n\t    * Implementations:\n\t      * para virtualize the entire system (OS kernal)\n\t      * parevirtualization drivers for some hardware (GPU, NIC...)\n\t    * Advantage:\n\t      * performance is improved, the hyperisor caan focus on isolating VMs and coordinating\n\t      * lower virtualization overhead\n\t    * Disadvantage\n\t      * the performance of the virtualization depends on the workload\n\t      * poor compatiblity and portability\n  \t* Hardware-assisted virtualization\n  \t  * modifying the CPU for virtualization purpose, where is in the root mode, ring -1 level for the hypervisor to run a virtual machine, when the CPu is running ont the root mode, the guest is running on a unvirtualized CPU, when the guest want to do hardware instructions, the CPU need set itself to the root mode and call the hypervisor to execute the instructions andn then get back to the non-root mode to tell the guest of the status of the execution\n  \t  * frequent VM transition, latency overhead and memory overhead"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/DD823750BA2159EA62E7AF430D5FF376.png\" alt=\"Screen Shot 2018-02-02 at 11.44.41 AM.png\" width=\"445\" height=\"289\"><hr>"
    },
    {
      "type": "markdown",
      "data": "* Cloud Infrastructure: a virtual machine and physical machine management infrastructure\n> The virtual machine is pretty heavy actually, while the container does not have hardware or kernal, but just the library needed.I t shares everything with the host OS as well as the hardware resources. Therefore, the containers on the Linux server can only run Linux code. Container can be seen as a process\n  * "
    }
  ]
}